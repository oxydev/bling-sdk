{"version":3,"file":"bling-sdk.esm.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/entities/tradepool.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["/*\n *   Copyright (c) 2022 \n *   All rights reserved.\n */\nimport JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  MATIC = 137,\n  MATIC_TESTNET = 80001,\n  FANTOM = 250,\n  FANTOM_TESTNET = 4002,\n  XDAI = 100,\n  BSC = 56,\n  BSC_TESTNET = 97,\n  ARBITRUM = 79377087078960,\n  MOONBASE = 1287,\n  AVALANCHE = 43114,\n  FUJI = 43113,\n  OKCHAIN_TEST = 65,\n  OKCHAIN = 66,\n  HECO = 128,\n  HECO_TESTNET = 256,\n  OASISETH_MAIN = 42262,\n  OASISETH_TEST = 42261,\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const INIT_CODE_HASH: string = '0x0f017e437c24c2f51b536db5c1de9fb917fb7a973372e810d175923c3fc6a771'\n\n\nexport const FACTORY_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\n  [ChainId.ROPSTEN]: '0x580763d106d6382bc5B31Bd0a00F6a68633639d7',\n  [ChainId.RINKEBY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.GÖRLI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.KOVAN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FANTOM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.MATIC_TESTNET]: '0x68af29e8bcba294248a7ba7a451faf1e8740c33c',\n  [ChainId.XDAI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.MOONBASE]: '0x2Ce3F07dD4c62b56a502E223A7cBE38b1d77A1b5',\n  [ChainId.AVALANCHE]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.OKCHAIN_TEST]: '0x5d7a9e3FA7F5f7A525b3de91c2Bb0deF9eBC7A14',\n  [ChainId.OKCHAIN]: '0x65728c1d0e545db117940d5745089c256516ad43',\n  [ChainId.FUJI]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '0xb0b670fc1f7724119963018db0bfa86adb22d941 ',\n  [ChainId.HECO_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.OASISETH_MAIN] :'0x5F50fDC22697591c1D7BfBE8021163Fc73513653',\n  [ChainId.OASISETH_TEST] :'0x72A2937B8eedBF6F0b6d110F0E0Ff2f613ED2f08',\n}\n\nexport const ROUTER_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F',\n  [ChainId.RINKEBY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ROPSTEN]: '0x29Ca94Ec11DBf747fDf6fF8E6008Ea6cc284F9Ca',\n  [ChainId.GÖRLI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.KOVAN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FANTOM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.MATIC_TESTNET]: '0xa05BE3A2207efc5A56df08562F6170AE2710e9B9',\n  [ChainId.XDAI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BSC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BSC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.MOONBASE]: '0xeB5c2BB5E83B51d83F3534Ae21E84336B8B376ef',\n  [ChainId.AVALANCHE]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FUJI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.OKCHAIN_TEST]: '0x2345e3C7E809e90b20d9E94D2507374c6D11d853',\n  [ChainId.OKCHAIN]: '0x9F843d9BA2A386BDA2845507450Fd47934fb3D03',\n  [ChainId.HECO]: '0xed7d5f38c79115ca12fe6c0041abb22f0a06c300',\n  [ChainId.HECO_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.OASISETH_MAIN] :'0x250d48C5E78f1E85F7AB07FEC61E93ba703aE668',\n  [ChainId.OASISETH_TEST] :'0x36F169362228C73629Ed22512792eA5FB2cD8c2a',\n}\n\n\n\n\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\n\n\nexport const ZOO_SWAP_MINING_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e',\n  [ChainId.ROPSTEN]: '0x919056B376eef61594B168Dcd4435134c24Cdf07',\n  [ChainId.OASISETH_MAIN]: '0xe63BBe4ef29BFFc40Fa6aE337ca2E532C9A30224',\n  [ChainId.OKCHAIN_TEST]: '0x034Ce8C07ED998008BD5C9053485B791C79f79d0' ,\n  [ChainId.OASISETH_TEST]: '0x00b3111dD70582544D7594C31459532Ce6dd3d11',\n}\n\n\nexport const ZOO_PARK_EXT_PID: { [chainId in ChainId]?: number } = {\n  [ChainId.MAINNET]: 0,\n  [ChainId.ROPSTEN]: 0,\n  [ChainId.OASISETH_MAIN]: -1,\n  [ChainId.OKCHAIN_TEST]:0,\n  [ChainId.OASISETH_TEST]: 4\n}\nexport const ZOO_PARK_EXT_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e',\n  [ChainId.ROPSTEN]: '0x480b021bdCFf73BBe8541E4D389Ca6b25d1e0907',\n  [ChainId.OASISETH_MAIN]: '0x86B8BD817048946958BdAEFa880E9AD297912fcc',\n  [ChainId.OKCHAIN_TEST]: '0x5CEDe17DCb104BaC72C86818ad56D683646a5b7a',\n  [ChainId.OASISETH_TEST]: '0xAEc94E047e426D4997875E98BbF81109b222f443',\n}\n\nexport const ZOO_ZAP_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e',\n  [ChainId.ROPSTEN]: '0x480b021bdCFf73BBe8541E4D389Ca6b25d1e0907',\n  [ChainId.OASISETH_MAIN]: '0x85C9065C6b522E71dC8520C35547E158D3013d74',\n  [ChainId.OKCHAIN_TEST]: '0x5CEDe17DCb104BaC72C86818ad56D683646a5b7a',\n  [ChainId.OASISETH_TEST]: '0xbF35fEec746C7F3AE0D9cee14Cc300C55EB250A1',\n}\n\n\n\n\n\n\nexport const ZOO_MINI_PARK_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e',\n  [ChainId.ROPSTEN]: '0x090D4613473dEE047c3f2706764f49E0821D256e',\n  [ChainId.OASISETH_MAIN]: '0x0B668864676DF56Bb1db54f61bF1FB1131Bc0f86',\n  [ChainId.OKCHAIN_TEST]: '0xd3e9C63A986A817df4626283e5e0a6B37805386C',\n  [ChainId.OASISETH_TEST]: '0xEBc2d9e7C783f85284CD445BA52E7e80da47F5fa',\n}\n\n\n//No use \nexport const MASTERCHEF_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\n  [ChainId.ROPSTEN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.RINKEBY]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.GÖRLI]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.KOVAN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '0x88a22a53d94e276e4dce0320cecf48c1c559e522',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.MOONBASE]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.FUJI]: '',\n  [ChainId.HECO]: '',\n  [ChainId.OKCHAIN_TEST]: '',\n  [ChainId.OKCHAIN]: '',\n  [ChainId.OASISETH_MAIN] :'0x7cE9D5cD6D9ddBd0CCa73837a1cd31c76F6c1857',\n  [ChainId.OASISETH_TEST] :'',\n  [ChainId.HECO_TESTNET]: ''\n}\n\nexport const BAR_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272',\n  [ChainId.ROPSTEN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.RINKEBY]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.GÖRLI]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.KOVAN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.MOONBASE]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.OKCHAIN_TEST]: '',\n  [ChainId.OKCHAIN]: '',\n  [ChainId.FUJI]: '',\n  [ChainId.HECO]: '',\n  [ChainId.OASISETH_MAIN] :'',\n  [ChainId.OASISETH_TEST] :'',\n  [ChainId.HECO_TESTNET]: ''\n}\n\nexport const MAKER_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xE11fc0B43ab98Eb91e9836129d1ee7c3Bc95df50',\n  [ChainId.ROPSTEN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.RINKEBY]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.GÖRLI]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.KOVAN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.MOONBASE]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.FUJI]: '',\n  [ChainId.OKCHAIN_TEST]: '',\n  [ChainId.OKCHAIN]: '',\n  [ChainId.HECO]: '',\n  [ChainId.OASISETH_MAIN] :'',\n  [ChainId.OASISETH_TEST] :'',\n  [ChainId.HECO_TESTNET]: ''\n}\n\nexport const TIMELOCK_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0x9a8541Ddf3a932a9A922B607e9CF7301f1d47bD1',\n  [ChainId.ROPSTEN]: '',\n  [ChainId.RINKEBY]: '',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.MOONBASE]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.FUJI]: '',\n  [ChainId.OKCHAIN_TEST]: '',\n  [ChainId.OKCHAIN]: '',\n  [ChainId.HECO]: '',\n  [ChainId.OASISETH_MAIN] :'',\n  [ChainId.OASISETH_TEST] :'',\n  [ChainId.HECO_TESTNET]: ''\n}","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { ChainId, SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  public static readonly BNB: Currency = new Currency(18, 'BNB', 'Binance Coin')\n\n  public static readonly FTM: Currency = new Currency(18, 'FTM', 'Fantom')\n\n  public static readonly MATIC: Currency = new Currency(18, 'MATIC', 'Matic')\n\n  public static readonly XDAI: Currency = new Currency(18, 'XDAI', 'xDai')\n\n  public static readonly GLMR: Currency = new Currency(18, 'GLMR', 'Glimmer')\n\n  public static readonly AVAX: Currency = new Currency(18, 'AVAX', 'Avalanche')\n\n  public static readonly HT: Currency = new Currency(18, 'HT', 'Heco Token')\n\n  public static readonly OKT: Currency = new Currency(18, 'OKT', 'OKchain Token')\n\n  public static readonly ROSE: Currency = new Currency(18, 'ROSE', 'ROSE Token')\n\n  public static readonly NATIVE = {\n    [ChainId.MAINNET]: Currency.ETHER,\n    [ChainId.ROPSTEN]: Currency.ETHER,\n    [ChainId.RINKEBY]: Currency.ETHER,\n    [ChainId.GÖRLI]: Currency.ETHER,\n    [ChainId.KOVAN]: Currency.ETHER,\n    [ChainId.FANTOM]: Currency.FTM,\n    [ChainId.FANTOM_TESTNET]: Currency.FTM,\n    [ChainId.MATIC]: Currency.MATIC,\n    [ChainId.MATIC_TESTNET]: Currency.MATIC,\n    [ChainId.XDAI]: Currency.XDAI,\n    [ChainId.BSC]: Currency.BNB,\n    [ChainId.BSC_TESTNET]: Currency.BNB,\n    [ChainId.ARBITRUM]: Currency.ETHER,\n    [ChainId.MOONBASE]: Currency.GLMR,\n    [ChainId.AVALANCHE]: Currency.AVAX,\n    [ChainId.OKCHAIN_TEST]: Currency.OKT,\n    [ChainId.OKCHAIN]: Currency.OKT,\n    [ChainId.FUJI]: Currency.AVAX,\n    [ChainId.HECO]: Currency.HT,\n    [ChainId.OASISETH_MAIN]: Currency.ROSE,\n    [ChainId.OASISETH_TEST]: Currency.ROSE,\n    [ChainId.HECO_TESTNET]: Currency.HT\n  }\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  public static getNativeCurrency(chainId?: ChainId) {\n    if (!chainId) {\n      throw Error(`No chainId ${chainId}`)\n    }\n\n    if (!(chainId in Currency.NATIVE)) {\n      throw Error(`No native currency defined for chainId ${chainId}`)\n    }\n    return Currency.NATIVE[chainId]\n  }\n\n  public static getNativeCurrencySymbol(chainId?: ChainId) {\n    const nativeCurrency = this.getNativeCurrency(chainId)\n    return nativeCurrency.symbol\n  }\n\n  public static getNativeCurrencyName(chainId?: ChainId) {\n    const nativeCurrency = this.getNativeCurrency(chainId)\n    return nativeCurrency.name\n  }\n\n  public getSymbol(chainId?: ChainId) {\n    if (!chainId) {\n      return this?.symbol\n    }\n\n    /*\n    if (this?.symbol === 'ETH') {\n      return Currency.getNativeCurrencySymbol(chainId)\n    }\n    */\n\n    // if (this?.symbol === 'WETH') {\n    //   return `W${Currency.getNativeCurrencySymbol(chainId)}`\n    // }\n\n    return this?.symbol\n  }\n\n  public getName(chainId?: ChainId) {\n    if (!chainId) {\n      return this?.name\n    }\n\n    if (this?.name === 'Ether') {\n      return Currency.getNativeCurrencyName(chainId)\n    }\n\n    return this?.name\n  }\n}\n\nconst ETHER = Currency.ETHER\n\nfunction IsNative(currency:Currency):Boolean{\n return Object.values(Currency.NATIVE).indexOf(currency) != -1\n}\n\nexport { ETHER ,IsNative}\n","/*\n *   Copyright (c) 2022 \n *   All rights reserved.\n */\nimport invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const DefaultChainToken = {\n  [ChainId.MAINNET]: {},\n  [ChainId.ROPSTEN]: {\n    DAI: new Token(ChainId.ROPSTEN, '0xaD6D458402F60fD3Bd25163575031ACDce07538D', 18, 'DAI', 'DAI'),\n    ZOO: new Token(ChainId.ROPSTEN, '0x5750A66848aC18b9b61c5870C5f4d37EDB60c8AF', 18, 'ZOO', 'ZOO'),\n    ROSE: new Token(ChainId.ROPSTEN, '0xD647d75154cF0616Ba06Af944E7e602F8AE75086', 9, 'ROSE', 'ROSE'),\n    USDT: new Token(ChainId.ROPSTEN, '0xcA8A7B55A04A9fdE7Ae7bf128384fa330F81A19c', 12, 'USDT', 'USDT'),\n    BTC: new Token(ChainId.ROPSTEN, '0xe6c87C360C24EfC6FEf4DCeFeD5607b0adaCf936', 15, 'BTC', 'BTC'),\n    ETH: new Token(ChainId.ROPSTEN, '0xf72C1522a1d430464f194295bC3EF0f2F479459D', 18, 'ETH', 'ETH'),\n    YUZU: new Token(ChainId.ROPSTEN, '0x015e3f7A499B4bdD2104470b1324d5940C3447AC', 18, 'YUZU', 'YUZU'),\n  },\n  [ChainId.OKCHAIN]: {\n    USDT: new Token(ChainId.OKCHAIN_TEST, '0x382bB369d343125BfB2117af9c149795C6C65C50', 18, 'USDT', 'USDT'),\n    OKB: new Token(ChainId.OKCHAIN_TEST, '0xdF54B6c6195EA4d948D03bfD818D365cf175cFC2', 18, 'OKB', 'OKB'),\n    ETHK: new Token(ChainId.OKCHAIN_TEST, '0xEF71CA2EE68F45B9Ad6F72fbdb33d707b872315C', 18, 'ETHK', 'ETHK'),\n    BTC: new Token(ChainId.OKCHAIN_TEST, '0x54e4622DC504176b3BB432dCCAf504569699a7fF', 18, 'BTC', 'BTC'),\n    WOKT: new Token(ChainId.OKCHAIN_TEST, '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15', 18, 'WOKT', 'WOKT'),\n  },\n  [ChainId.OKCHAIN_TEST]: {\n    BTC: new Token(ChainId.OKCHAIN_TEST, '0x09973e7e3914EB5BA69C7c025F30ab9446e3e4e0', 10, 'BTC', 'BTC'),\n    USDT: new Token(ChainId.OKCHAIN_TEST, '0xe579156f9dEcc4134B5E3A30a24Ac46BB8B01281', 10, 'USDT', 'USDT'),\n    ETHK: new Token(ChainId.OKCHAIN_TEST, '0xDF950cEcF33E64176ada5dD733E170a56d11478E', 10, 'ETHK', 'ETHK'),\n    WOKT: new Token(ChainId.OKCHAIN_TEST, '0x70c1c53E991F31981d592C2d865383AC0d212225', 18, 'WOKT', 'WOKT'),\n    OKB: new Token(ChainId.OKCHAIN_TEST, '0xDa9d14072Ef2262c64240Da3A93fea2279253611', 10, 'OKB', 'OKB'),\n    ZOO: new Token(ChainId.OKCHAIN_TEST, '0xd56F1F930760BD93871B96E36CDB5dda7d3D7108', 18, 'ZOO', 'ZOO'),\n  },\n  [ChainId.MATIC_TESTNET]: {\n    BTC: new Token(ChainId.MATIC_TESTNET, '0xafacf8468d769208d4a1c84d4ea63320fd75ffaa', 18, 'BTC', 'BTC'),\n    USDT: new Token(ChainId.MATIC_TESTNET, '0xfcf1fa21fa89b2fb50b77a621b3fe38233401a29', 18, 'USDT', 'USDT'),\n  },\n\n  [ChainId.OASISETH_MAIN]: {\n    ETH: new Token(ChainId.OASISETH_MAIN, '0x3223f17957Ba502cbe71401D55A0DB26E5F7c68F', 18, 'wETH', 'wETH'),\n    USDT: new Token(ChainId.OASISETH_MAIN, '0xdC19A122e268128B5eE20366299fc7b5b199C8e3', 6, 'weUSDT', 'weUSDT'),\n    YUZU: new Token(ChainId.OASISETH_MAIN, '0xf02b3e437304892105992512539F769423a515Cb', 18, 'YUZU', 'YUZU'),\n  },\n  [ChainId.HECO]: {\n    ETH: new Token(ChainId.HECO, '0x64FF637fB478863B7468bc97D30a5bF3A428a1fD', 18, 'ETH', 'ETH'),\n    HBTC: new Token(ChainId.HECO, '0x66a79D23E58475D2738179Ca52cd0b41d73f0BEa', 18, 'HBTC', 'HBTC'),\n    USDT: new Token(ChainId.HECO, '0xa71EdC38d189767582C38A3145b5873052c3e47a', 10, 'USDT', 'USDT'),\n    WHT: new Token(ChainId.HECO, '0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F', 18, 'WHT', 'WHT'),\n    HUSD: new Token(ChainId.HECO, '0x0298c2b32eaE4da002a15f36fdf7615BEa3DA047', 8, 'HUSD', 'HUSD'),\n    MDX: new Token(ChainId.HECO, '0x25D2e80cB6B86881Fd7e07dd263Fb79f4AbE033c', 18, 'MDX', 'MDX'),\n    BAG:   new Token(ChainId.HECO, '0xa042fb0e60125A4022670014AC121931e7501Af4',18),\n    HFIL:   new Token(ChainId.HECO, '0xae3a768f9aB104c69A7CD6041fE16fFa235d1810',18),\n    HLTC:   new Token(ChainId.HECO, '0xecb56cf772B5c9A6907FB7d32387Da2fCbfB63b4',18),\n    BXH:   new Token(ChainId.HECO, '0xcBD6Cb9243d8e3381Fea611EF023e17D1B7AeDF0',18),\n    TRIBE:   new Token(ChainId.HECO, '0x38999Fa3a7320bD2c3609BF0f8cB5CD4C11D3Fe1',18),\n    AAVE:   new Token(ChainId.HECO, '0x202b4936fE1a82A4965220860aE46d7d3939Bb25',18),\n    UNI:   new Token(ChainId.HECO, '0x22C54cE8321A4015740eE1109D9cBc25815C46E6',18),\n    FEI:   new Token(ChainId.HECO, '0x485cdBFF08A4F91a16689E73893a11ae8B76af6D',18),\n    SNX:   new Token(ChainId.HECO, '0x777850281719d5a96C29812ab72f822E0e09F3Da',18),\n    YFI:   new Token(ChainId.HECO, '0xB4F019bEAc758AbBEe2F906033AAa2f0F6Dacb35',18),\n    LINK:   new Token(ChainId.HECO, '0x9e004545c59D359F6B7BFB06a26390b087717b42',18),\n    MAKER:   new Token(ChainId.HECO, '0x34D75515090902a513F009f4505A750efaaD63b0',18),\n    COMP:   new Token(ChainId.HECO, '0xCe0A5CA134fb59402B723412994B30E02f083842',18),\n    BAL:   new Token(ChainId.HECO, '0x045De15Ca76e76426E8Fc7cba8392A3138078D0F',18),\n  },\n  [ChainId.OASISETH_TEST]: {\n    ETH: new Token(ChainId.OASISETH_TEST, '0xB38C1c2b5b0963428642eC55a320b429f21E180C', 18, 'ETH', 'ETH'),\n    USDT: new Token(ChainId.OASISETH_TEST, '0xC584fFD011e16A10fd8329853B9B8DE6E0313AD9', 18, 'USDT', 'USDT'),\n    BTC: new Token(ChainId.OASISETH_TEST, '0x961C7a3f1909243C9af056Fd11EdDa2e18b35C7b', 18, 'BTC', 'BTC'),\n    YUZU: new Token(ChainId.OASISETH_TEST, '0x59e573F48D379D95064811e3C59546f2f350bb2b', 18, 'YUZU', 'YUZU'),\n  },\n}\n// In reality this is a map of the wrapped version of the native token for a given network.\n// TODO: Rename to WNATIVE for sanity\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83', 18, 'WFTM', 'Wrapped FTM'),\n  [ChainId.FANTOM_TESTNET]: new Token(\n    ChainId.FANTOM_TESTNET,\n    '0xf1277d1Ed8AD466beddF92ef448A132661956621',\n    18,\n    'FTM',\n    'Wrapped FTM'\n  ),\n  [ChainId.MATIC]: new Token(\n    ChainId.MATIC,\n    '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    '0x9b506afc4765af3f4af8458cab17eedd546fa01e',\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d', 18, 'WXDAI', 'Wrapped xDai'),\n  [ChainId.BSC]: new Token(ChainId.BSC, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.ARBITRUM]: new Token(\n    ChainId.ARBITRUM,\n    '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.MOONBASE]: new Token(\n    ChainId.MOONBASE,\n    '0xe73763DB808ecCDC0E36bC8E32510ED126910394',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.AVALANCHE]: new Token(\n    ChainId.AVALANCHE,\n    '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    18,\n    'WAVAX',\n    'Wrapped AVAX'\n  ),\n  [ChainId.FUJI]: new Token(ChainId.FUJI, '0xd00ae08403B9bbb9124bB305C09058E32C39A48c', 18, 'WAVAX', 'Wrapped AVAX'),\n  [ChainId.HECO]:   DefaultChainToken[ChainId.HECO].WHT,\n  [ChainId.HECO_TESTNET]: new Token(\n    ChainId.HECO_TESTNET,\n    '0x5B2DA6F42CA09C77D577a12BeaD0446148830687',\n    18,\n    'WHT',\n    'Wrapped HT'\n  ),\n  [ChainId.OKCHAIN_TEST]:  DefaultChainToken[ChainId.OKCHAIN_TEST].WOKT,\n  [ChainId.OKCHAIN]: DefaultChainToken[ChainId.OKCHAIN_TEST].WOKT,\n  [ChainId.OASISETH_MAIN]: new Token(\n    ChainId.OASISETH_MAIN,\n    '0x21C718C22D52d0F3a789b752D4c2fD5908a8A733',\n    18,\n    'wROSE',\n    'Wrapped ROSE'\n  ),\n  [ChainId.OASISETH_TEST]: new Token(\n    ChainId.OASISETH_TEST,\n    '0x792296e2a15e6Ceb5f5039DecaE7A1f25b00B0B0',\n    18,\n    'wROSE',\n    'Wrapped ROSE'\n  ),\n}\n\n\nexport const SUSHI_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0x6B3595068778DD592e39A122f4f5a5cF09C90fE2',\n  [ChainId.ROPSTEN]: DefaultChainToken[ChainId.ROPSTEN].YUZU.address,\n  [ChainId.RINKEBY]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.GÖRLI]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.KOVAN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.MOONBASE]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.FUJI]: '',\n  [ChainId.OKCHAIN_TEST]: DefaultChainToken[ChainId.OKCHAIN_TEST].ZOO.address,\n  [ChainId.OKCHAIN]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '',\n  [ChainId.OASISETH_MAIN]: '',\n  [ChainId.OASISETH_TEST]: DefaultChainToken[ChainId.OASISETH_TEST].YUZU.address,\n  [ChainId.HECO_TESTNET]: ''\n}\n// 平台币\nexport const ECOSYSTEM_TOKEN_ADDRESS = SUSHI_ADDRESS","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS[tokenA.chainId],\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    let nativeToken = Currency.getNativeCurrency(pairs[0].chainId)\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === nativeToken && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === nativeToken && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, IsNative } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  let nativeToken = Currency.getNativeCurrency(chainId)\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === nativeToken) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  let nativeToken = Currency.getNativeCurrency(chainId)\n  if (currency instanceof Token) return currency\n  if (currency === nativeToken) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    let nativeToken = Currency.getNativeCurrency(route.chainId)\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : IsNative(route.input)\n        ? new CurrencyAmount(nativeToken, amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : IsNative(route.output)\n        ? new CurrencyAmount(nativeToken, amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Token  } from './token'\nimport JSBI from 'jsbi'\nimport {Decimal} from 'decimal.js'\n\n\n\nexport class AttenuationReward {\n\n  public readonly startBlock: number //开始\n  public readonly zooPerBlock: JSBI\n  public readonly halfAttenuationCycle: number //减半周期\n\n  constructor(args:{ startBlock:number,zooPerBlock:JSBI,halfAttenuationCycle:number} ){\n    ({\n      startBlock: this.startBlock,\n      zooPerBlock: this.zooPerBlock,\n      halfAttenuationCycle: this.halfAttenuationCycle,\n    } = args);\n\n  }\n\n\n\n    public getZooRewardBetween(start: number,end :number) : Decimal {\n      let getZooReardFromStart = (end:number): Decimal=>{\n\n        if( start< this.startBlock || end < this.startBlock || start > end) {\n          return new Decimal(0)\n        }\n        let cycle = Math.floor((end-this.startBlock)/(this.halfAttenuationCycle))\n        if(cycle > 255) {\n          cycle = 255;\n        }\n        let  attenuationMul =  1 << cycle;\n\n        const multiply = 1000000\n\n        let rest = JSBI.BigInt(Math.floor(multiply * ((this.halfAttenuationCycle*2)- (this.halfAttenuationCycle/attenuationMul)-( this.halfAttenuationCycle\n          - (end-this.startBlock)% this.halfAttenuationCycle)/attenuationMul)))\n\n        const re  = new Decimal(this.zooPerBlock.toString(10)).mul(new Decimal(rest.toString(10)).div(multiply))\n        \n        return re\n       }\n\n      return getZooReardFromStart(end).sub(getZooReardFromStart(start)) \n    \n    }\n\n}\n\n\n\nexport class TradePool {\n  public readonly token0!: Token\n  public readonly token1!: Token\n  public readonly isToken0Archor!: boolean\n  public readonly totalLp!: JSBI // 总交易手续（以archortoken 为参考)\n  // 总交易手续（以archortoken 为参考)\n  public readonly accZooPerShare!: number // 每lp 对应奖励  times 1e12\n // 每lp 对应奖励 \n  public readonly rewardEffect!: number // 奖励系数 *10000\n // 奖励系数 *10000\n  public readonly lastRewardBlock!: number // 奖励系数 *10000\n // 当前zoo余额\n // 奖池\n  public readonly rewardConfig!: AttenuationReward // 奖池配置\n\n  public readonly myReward!: JSBI // 当前未领取奖励\n // 当前未领取奖励\n  public readonly myCurrentLp!: JSBI // 当前未领取lp\n // 当前未领取lthis.p\n  public readonly currentTradePoint!: number\n  public readonly pid!: number\n\n\n  constructor(data: Partial<TradePool>) {\n      Object.assign(this, data);\n  }\n\n  // 显示用的helper 函数\n  public  getDayReturn(currBlockNo:number,rewardPrice :number,archorPrice :number) : Decimal {\n    // one day ≈  21600 block\n    if(JSBI.greaterThan(this.totalLp,JSBI.BigInt(0))) {\n     // const oneDayReward = JSBI.divide(JSBI.BigInt(this.rewardConfig.getZooRewardBetween(currBlockNo,currBlockNo + 21600)) ,this.totalLp)\n      const oneDayReward = new  Decimal(this.rewardConfig.getZooRewardBetween(currBlockNo,currBlockNo + 21600).toString()).div( new Decimal(this.totalLp.toString(10)))\n      // 0.3% fee\n      return   oneDayReward.div(new Decimal(rewardPrice)).div(new Decimal(archorPrice))\n    } else{\n      return new Decimal(0)\n    }\n  }\n\n\n  public  getTotalReward(currenBlockNo:number) : JSBI {\n    return  JSBI.BigInt(this.rewardConfig.getZooRewardBetween(this.rewardConfig.startBlock,currenBlockNo))\n  }\n\n\n}\nexport class StakePool {\n  public readonly token0!: Token\n  public readonly token1!: Token\n  public readonly token0Balance!: JSBI\n  public readonly token1Balance!: JSBI\n\n  public readonly lpAddress!: string\n  public readonly totalLp!: JSBI \n  public readonly totalLpInPark!: JSBI \n  public readonly rewardEffect!: number // 奖励系数 *10000\n // 奖励系数 *10000\n  public readonly lastRewardBlock!: number // 奖励系数 *10000\n // 当前zoo余额\n  public readonly rewardConfig!: AttenuationReward // 奖池配置\n  public readonly myCurrentLp!: JSBI\n  public readonly myLpBalance!: JSBI\n  public readonly myReward!: JSBI\n  public readonly pid!: number\n\n\n  constructor(data: Partial<StakePool>) {\n    Object.assign(this, data);\n  }\n\n  public  getDayReturn(currBlockNo:number,rewardPrice :number,token0Price :number,token1Price:number) : Decimal {\n    // one day ≈  21600 block\n    if(JSBI.greaterThan(this.totalLpInPark,JSBI.BigInt(0))) {\n      //const oneDayReward = JSBI.divide(JSBI.BigInt(this.rewardConfig.getZooRewardBetween(currBlockNo,currBlockNo + 21600)) ,this.totalLpInPark)\n      const oneDayReward = new  Decimal(this.rewardConfig.getZooRewardBetween(currBlockNo,currBlockNo + 21600).toString()).div( new Decimal(this.totalLp.toString(10)))\n      //       oneDayReward Price /OneDay reward * 100000\n      // 0.3% fee\n\n     return oneDayReward.mul(new Decimal(rewardPrice)).div(  (new Decimal(this.token0Balance.toString(10)).mul(token0Price).div(new Decimal(this.totalLpInPark.toString(10)) ) ).add(  \n        new Decimal(this.token1Balance.toString(10)).mul(token1Price).div(new Decimal(this.totalLpInPark.toString(10)) ) \n      ))\n    } else{\n      return new Decimal(0)\n    }\n  }\n\n}\n\nexport function jsbiFloor (val:number) {\n  return JSBI.BigInt(Math.floor(val))\n}","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, IsNative, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = IsNative(trade.inputAmount.currency)\n    const etherOut = IsNative(trade.outputAmount.currency)\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","INIT_CODE_HASH","FACTORY_ADDRESS","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","FANTOM","FANTOM_TESTNET","MATIC","MATIC_TESTNET","XDAI","BSC","BSC_TESTNET","ARBITRUM","MOONBASE","AVALANCHE","OKCHAIN_TEST","OKCHAIN","FUJI","HECO","HECO_TESTNET","OASISETH_MAIN","OASISETH_TEST","ROUTER_ADDRESS","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","ZOO_SWAP_MINING_ADDRESS","ZOO_PARK_EXT_PID","ZOO_PARK_EXT_ADDRESS","ZOO_ZAP_ADDRESS","ZOO_MINI_PARK_ADDRESS","MASTERCHEF_ADDRESS","BAR_ADDRESS","MAKER_ADDRESS","TIMELOCK_ADDRESS","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","getNativeCurrency","chainId","NATIVE","getNativeCurrencySymbol","nativeCurrency","getNativeCurrencyName","getSymbol","getName","ETHER","FTM","BNB","GLMR","AVAX","OKT","HT","ROSE","IsNative","currency","values","indexOf","Token","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","DefaultChainToken","DAI","ZOO","USDT","BTC","ETH","YUZU","OKB","ETHK","WOKT","HBTC","WHT","HUSD","MDX","BAG","HFIL","HLTC","BXH","TRIBE","AAVE","UNI","FEI","SNX","YFI","LINK","MAKER","COMP","BAL","WETH","SUSHI_ADDRESS","ECOSYSTEM_TOKEN_ADDRESS","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","nativeToken","currentInput","midPrice","_100_PERCENT","Percent","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","AttenuationReward","args","startBlock","zooPerBlock","halfAttenuationCycle","getZooRewardBetween","start","end","getZooReardFromStart","cycle","Math","floor","attenuationMul","rest","re","mul","sub","TradePool","data","assign","getDayReturn","currBlockNo","rewardPrice","archorPrice","totalLp","oneDayReward","rewardConfig","getTotalReward","currenBlockNo","StakePool","totalLpInPark","token0Balance","token1Balance","jsbiFloor","val","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","then","fetchPairData","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}